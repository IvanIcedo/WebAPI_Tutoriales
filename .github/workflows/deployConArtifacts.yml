name: Build Test y Deploy usando Artifacts

# Buildea completamente la solucion para generar los ejecutables que se usaran para el testing 
# y el deploy en caso de que el testing pase

on: 
  push:
    branches: master
  pull_request: 
    branches: master

concurrency:
  group: deploy-a-produccion

jobs: 
  buildeando_solucion:
    runs-on: ubuntu-latest
    steps:
      # Descargar repositorio en el runner
      - name: Descargando el repositorio en el runner
        uses: actions/checkout@v4
      - name: Instalando SDK .NET
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: 7.0.x
          cache: true
          cache-dependency-path: '**/*.csproj'
      - name: Instalando dependencias de proyectos
        run: dotnet restore
      - name: Buildeando solucion
        run: dotnet build --configuration Release
      - name: Guardado builds generados
        uses: actions/upload-artifact@v4
        with:
          name: solucion-build
          path: './**/bin'
          retention-days: 1
        
  testeando_api:
    runs-on: ubuntu-latest
    needs: buildeando_solucion
    steps:
      - name: Descargando artifact de build ya hecho
        uses: actions/download-artifact@v4
        with: 
          name: solucion-build
          path: ~/Testing
      - run: ls -R ~/Testing
      - name: Instalando SDK .NET
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: 7.0.x
          cache: true
          cache-dependency-path: '**/*.csproj'
      - name: Correr tests
        run: dotnet test ~/Testing
  
  deploying_a_produccion:
    runs-on: self-hosted
    needs: testeando_api
    steps: 
      - run: echo "Deploy a production"
      
  post-limpieza-pipeline:
    runs-on: ubuntu-latest
    needs: deploying_a_produccion
    if: always()
    steps: 
      - name: Borrando artifact de building de produccion
        uses: geekyeggo/delete-artifact@v5
        with:
          name: solucion-build
